#!/usr/bin/perl
use strict;
use warnings;

use Net::Ping;
use Data::Dumper;

use threads;
use threads::shared;

use Getopt::Long qw(GetOptions);
Getopt::Long::Configure qw(gnu_getopt);

use Curses;
use JSON::PP;
use Time::HiRes qw(sleep usleep time tv_interval);
use POSIX;
use Statistics::Descriptive;
use File::Basename;

my $timeout = 1;
my $ping_interval = 1;
my $hostdown_min_lost_ping = 3;
my %ping_data : shared = ();
my %resolved_hosts : shared = ();
my $sync_ping_cnt : shared = 0;
my @pressed_keys = ();
my @thr_handles = (); # used in the SIG handlers
my $term_resize = 0;
my @log_data : shared = ();
my $log_subwin;
my $log_scrolled = 0;
my $log_scroll_shift = 0;
my $scr_max = {
	'x' => undef,
	'y' => undef,
};
my $hdr_len = {
	'host' => 20,
	'sep' => 2,
	'rtt' => '6',
	'history' => undef,
};
my $hdr_line_cnt = 3;
my @stats_selector = qw/ Last Loss% Avg Min Max StDev RX_cnt TX_cnt XX_cnt /;
my $host_meta = {};
my $host_meta_cnt = 0;
my %config : shared = (
	'print_resolved_ip' => 0,
	'show_scale' => 0,
	'scale_ms' => undef,
	'pause' => 0,
	'sync_ping' => 0,
	'log_size' => 500,
);

sub ping_host {
	my $host = shift;
	my $pinger = Net::Ping->new('icmp', $timeout);
	my ($success, $rtt, $ip);
	my $tdata;
	my ($pinger_target, $needs_resolve);

	$pinger->hires();

	while (1) {
		my $ping_begin = time;
		if (!$config{'pause'}) {
			{
				lock(%resolved_hosts);
				if (!exists($resolved_hosts{$host}) || !defined($resolved_hosts{$host})) {
					$pinger_target = $host;
					$needs_resolve = 1;
				} else {
					$pinger_target = $resolved_hosts{$host};
					$needs_resolve = 0;
				}
			}
			($success, $rtt, $ip) = $pinger->ping($pinger_target);

			# discard if pause was hit, and we were in progress ping'ing
			if (!$config{'pause'}) {
				if (defined($rtt)) {
					$rtt *= 1000; # convert to "ms"
				}
				
				{
					lock(%ping_data);
					$tdata = decode_json($ping_data{$host});
					push(@{$tdata}, {
						'success' => $success,
						'rtt' => $rtt,
						'ip' => $ip,
						'stats_new' => 1,
					});
					$ping_data{$host} = encode_json($tdata);
				}
				if ($needs_resolve) {
					lock(%resolved_hosts);

					if ($success) {
						$resolved_hosts{$host} = $ip;
					} else {
						$resolved_hosts{$host} = undef;
					}
				}
			}
		}

		if ($config{'sync_ping'}) {
			lock($sync_ping_cnt);
			$sync_ping_cnt++;
			cond_wait($sync_ping_cnt) until $sync_ping_cnt == 0;
		}

		# sleep till one second from ping beginning elapsed.
		my $sleep_time = $ping_interval - (time - $ping_begin);
		sleep($sleep_time) if ($sleep_time > 0);
	}

	#$pinger->close(); // we are exiting anyway
}

sub getch_blocking { # thanks to halfdelay() we block with a timeout
	my ($ch, $key);
	while (1) {
		($ch, $key) = getch();
		if (defined($key)) { # special key
			next;
		}
		if (!defined($ch)) {
			last; # getch() error
		}
		if ($ch eq '-1') {
			last; # no key pressed
		}

		# defined($ch) && $ch != -1

		push(@pressed_keys, $ch);
	}
}

sub init_curses() {
	initscr();
	noecho();
	start_color();
	curs_set(0);
	halfdelay(1); # makes getch() to block with a timeout
	keypad(1);

	reinit_curses();
}

sub reinit_curses() {
	endwin();
	refresh();

	$scr_max->{'y'} =  getmaxy(stdscr);
	$scr_max->{'x'} =  getmaxx(stdscr);

	$log_subwin->delwin() if (defined $log_subwin);
	$log_subwin = subwin(0, 0, $host_meta_cnt + $hdr_line_cnt + 1, 0);
	$log_subwin->scrollok(1);
	$log_subwin->clearok(1);
	$log_subwin->leaveok(1);
}

sub handle_pressed_keys() {
	my $key;
	while (scalar @pressed_keys) {
		$key = shift @pressed_keys;

		if (lc($key) eq 'd') {
			$config{'print_resolved_ip'} = !$config{'print_resolved_ip'};
		}
		if ($key eq 's') {
			push(@stats_selector, shift @stats_selector);
		}
		if ($key eq 'S') {
			unshift(@stats_selector, pop @stats_selector);
		}
		if (lc($key) eq 't') {
			$config{'show_scale'} = !$config{'show_scale'};
		}
		if (lc($key) eq 'p') {
			$config{'pause'} = !$config{'pause'};
		}
		if (lc($key) eq 'q') {
			exit_curses_and_join_threads();
			exit(0);
		}
		if ($key eq KEY_PPAGE) {
			my $y = $log_subwin->getmaxy;
			lock(@log_data);

			my $log_len = scalar @log_data;
			$log_scroll_shift += $y;
			if($log_scroll_shift > $log_len - $y) {
				$log_scroll_shift = $log_len - $y;
			}

			if ($log_len > $y) {
				$log_subwin->scrl($y);
				$log_scrolled = 1;
			}
			print_log_header ("scrolled: $log_scrolled, y: $y, log_len:".scalar @log_data." , shift: $log_scroll_shift");
		}
		if ($key eq KEY_NPAGE) {
			my $y = $log_subwin->getmaxy;
			lock(@log_data);

			my $log_len = scalar @log_data;

			$log_scroll_shift -= $y;
			if($log_scroll_shift < 0) {
				$log_scroll_shift = 0;
				$log_scrolled = 0;
			} else {
				$log_scrolled = 1;
				$log_subwin->scrl(-$y);
			}
			print_log_header ("scrolled: $log_scrolled, y: $y, log_len:".scalar @log_data." , shift: $log_scroll_shift");
		}
		if ($key eq KEY_RESIZE) {
			$term_resize = 1;
		}
		if ($key eq "\n" || $key eq ' ') {
			print_log("--- seen ---\n");
		}
	}
}

sub init_structs_for_host {
	my $line = shift @_;

	if (exists($host_meta->{$line})) {
		return;
	}

	$host_meta->{$line} = {
		'line_pos' => $host_meta_cnt + $hdr_line_cnt,
		'stats' => Statistics::Descriptive::Full->new(),
		'pkt_sent' => 0,
		'pkt_recv' => 0,
		'down_timestamp' => 0,
		'down_cnt' => 0,
	};
	++$host_meta_cnt;

	$ping_data{$line} = encode_json([]);
}

sub read_list_file_and_init_structs {
	my $list_file = shift @_;
	my $line;

	open(HOSTLIST, '<', $list_file) or die("open($list_file): $!\n");
	while ($line = <HOSTLIST>) {
		if ($line =~ /^\s*$/ || $line =~ /^\s*#/) {
			next; # skip empty and commented out lines
		}
		# trim() white-spaces
		$line =~ s/^\s+//;
		$line =~ s/\s+$//;

		init_structs_for_host($line);
	}
	close(HOSTLIST) or die("close($list_file): $!\n");
}

sub start_ping_threads {
	my $host;
	my $thr;

	foreach $host (keys %{$host_meta}) {
		$thr = threads->create(\&ping_host, $host);
		push(@thr_handles, $thr);
	}
}

sub print_host_headers {
	my $host;
	my $pos;
	my $s;

	foreach $host (keys %{$host_meta}) {
		if (!$config{'print_resolved_ip'}) {
			$s = $host;
		} else {
			lock(%resolved_hosts);
			if (!exists($resolved_hosts{$host})) {
				$s = $host;
			} else {
				if (defined($resolved_hosts{$host})) {
					$s = $resolved_hosts{$host};
				} else {
					$s = "DNS resolve failed";
				}
			}
		}

		$s = substr($s, 0, $hdr_len->{'host'}); # cut, if needed
		addstr(
			$host_meta->{$host}->{'line_pos'}, 0,
			$s
		);

		# clear up stale text
		$pos = length($s);
		if ($pos < $hdr_len->{'host'}) {
			addstr(
				$host_meta->{$host}->{'line_pos'}, $pos,
				' 'x($hdr_len->{'host'} - $pos)
			);
		}
	}
}

sub calc_hdr_lengths {
	$hdr_len->{'history'} = $scr_max->{'x'} -
		$hdr_len->{'host'} - $hdr_len->{'sep'} - $hdr_len->{'rtt'} -
		$hdr_len->{'sep'};
	
	if ($hdr_len->{'history'} < 10) {
		#TODO: set history to 1 and say it to log
		die("Your screen is too small (columns=".$scr_max->{'x'}.").\n");
	}
}

sub _print_ping_sample_scale {
	my $sample = shift @_;
	my $num;

	if (!$config{'show_scale'}) {
		if ($sample->{'success'}) {
			return '.';
		} else {
			if (!$sample->{'ip'}) {
				return 'E'; # General error
			} else {
				return 'X';
			}
		}
	}

	# show scale

	if (!$sample->{'success'}) {
		if (!$sample->{'ip'}) {
			return 'E'; # General error
		} else {
			return '-';
		}
	}

	$num = floor($sample->{'rtt'} / $config{'scale_ms'});
	if ($num > 9) { # this should never happen
		$num = '>';
	} elsif ($num < 0) { # this should never happen
		$num = '<';
	}

	return $num;
}

sub _print_ping_samples {
	my $host = shift @_;
	my @all_samples = @{shift @_};
	my $pos;
	my $i;
	my $ch;
	my $sample;

	$pos = $scr_max->{'x'} - $hdr_len->{'history'};
	for ($i = 0; $i < $hdr_len->{'history'}; ++$i, ++$pos) {
		if ($i >= scalar @all_samples) { # no more data
			$ch = ' ';
		} else {
			$sample = $all_samples[$i];

			$ch = _print_ping_sample_scale($sample);

			if ($sample->{'stats_new'}) {
				$sample->{'stats_new'} = 0;
				$host_meta->{$host}->{'pkt_sent'} += 1;
				if ($sample->{'success'}) {
					$host_meta->{$host}->{'stats'}->add_data($sample->{'rtt'});
					$host_meta->{$host}->{'pkt_recv'} += 1;
				}
			}

			# update the global data
			$all_samples[$i] = $sample;
		}
		addstr(
			$host_meta->{$host}->{'line_pos'},
			$pos,
			$ch
		);
	}
}

sub _get_rtt_sample_stats {
	my $sample = shift @_;
	my $host = shift @_;
	my $val;
	my $st = $stats_selector[0];
	my $decpt = 1;
	my $suffix = '';

	if ($st eq "Last") {
		$val = $sample->{'success'} ? $sample->{'rtt'} : undef;
	}
	elsif ($st eq "Loss%") {
		if ($host_meta->{$host}->{'pkt_sent'} == 0) {
			$val = undef;
		} else {
			$val = (
				$host_meta->{$host}->{'pkt_recv'}
				/
				$host_meta->{$host}->{'pkt_sent'}
				*
				100
			);
			$val = 100 - $val;
			$decpt = 0; # fmt
			$suffix = '%';
		}
	}
	elsif ($st eq "Avg") {
		$val = $host_meta->{$host}->{'stats'}->mean();
	}
	elsif ($st eq "Min") {
		$val = $host_meta->{$host}->{'stats'}->min();
	}
	elsif ($st eq "Max") {
		$val = $host_meta->{$host}->{'stats'}->max();
	}
	elsif ($st eq "StDev") {
		$val = $host_meta->{$host}->{'stats'}->standard_deviation();
	}
	elsif ($st eq "RX_cnt") {
		$val = $host_meta->{$host}->{'stats'}->count();
		if ($val != $host_meta->{$host}->{'pkt_recv'}) {
			die("Sanity check failed");
		}
		$decpt = 0; # fmt
	}
	elsif ($st eq "TX_cnt") {
		$val = $host_meta->{$host}->{'pkt_sent'};
		$decpt = 0; # fmt
	}
	elsif ($st eq "XX_cnt") { # Lost packets count
		$val = $host_meta->{$host}->{'pkt_sent'} - $host_meta->{$host}->{'pkt_recv'};
		$decpt = 0; # fmt
	}
	else {
		die("Bad stats_selector value: $st");
	}

	if (!defined($val)) {
		$val = '-';
	} else {
		$val = sprintf('%.'.$decpt.'f', $val);
	}
	return sprintf('%'.$hdr_len->{'rtt'}.'s', $val . $suffix);
}

sub _print_ping_rtt_info {
	my $host = shift @_;
	my @all_samples = @{shift @_};
	my $sample;
	my $ch;

	$ch = sprintf(
		'%'.$hdr_len->{'rtt'}.'s',
		''
	);
	if (scalar @all_samples > 0) {
		$sample = $all_samples[scalar @all_samples - 1]; # last sample
		$ch = _get_rtt_sample_stats($sample, $host);
	}
	addstr(
		$host_meta->{$host}->{'line_pos'},
		$hdr_len->{'host'} + $hdr_len->{'sep'},
		$ch
	);
}

sub print_ping_data {
	my $host;
	my @all_samples;

	{
		lock(%ping_data);
		foreach $host (keys %ping_data) {
			@all_samples = @{decode_json($ping_data{$host})};

			if (scalar @all_samples > $hdr_len->{'history'}) {
				# cut into half; save only the more recent entries
				@all_samples = splice @all_samples, scalar(@all_samples)/2;
			}

			_print_ping_samples($host, \@all_samples);
			_print_ping_rtt_info($host, \@all_samples);

			# update the global data
			$ping_data{$host} = encode_json(\@all_samples);

			my $last_sample = $all_samples[-1];
			if (!$last_sample->{'success'}) {
				$host_meta->{$host}->{'down_cnt'}++;

				if ($host_meta->{$host}->{'down_cnt'} == $hostdown_min_lost_ping) {
					print_log($host." host down\n");
				}

				if ($host_meta->{$host}->{'down_timestamp'} eq 0) {
					$host_meta->{$host}->{'down_timestamp'} = time;
				}
			} else {
				if ($host_meta->{$host}->{'down_timestamp'} ne 0 && $host_meta->{$host}->{'down_cnt'} >= $hostdown_min_lost_ping) {
					print_log($host." host recover. Down time: ".
						sec2human(floor(time - $host_meta->{$host}->{'down_timestamp'})). "\n");
				}
				$host_meta->{$host}->{'down_timestamp'} = 0;
				$host_meta->{$host}->{'down_cnt'} = 0;
			}
		}
	}
}

sub trigger_sync_ping {
	return if (!$config{'sync_ping'});

	lock($sync_ping_cnt);
	lock(%ping_data);

	return if ($sync_ping_cnt < keys %ping_data);

	$sync_ping_cnt = 0;
	cond_broadcast($sync_ping_cnt);
}

sub sec2human {
	my $in_sec = shift @_;
	my @out;
	my $mday; my $hour;my $min; my $sec;

	return "$in_sec sec." if ($in_sec <= 60);

	push @out, "$mday day"  if (($mday = int($in_sec/(24 * 60 * 60))) != 0);
	push @out, "$hour hour" if (($hour = ($in_sec / (60 * 60) % 24))  != 0);
	push @out, "$min min"   if (($min  = ($in_sec / 60) % 60)	  != 0);
	push @out, "$sec sec"   if (($sec  =  $in_sec % 60)		  != 0);

	return "$in_sec sec (" . join(' ', @out) . ")";
}

sub print_log_header {
	# my $x, $y;
	# $log_subwin->getxy($x, $y);
	$_ = shift;
	chomp;
	addstr(stdscr, $host_meta_cnt + $hdr_line_cnt, 0, "=== " . $_ ." ===");
}

sub print_log {
	my $line = strftime("%d-%m-%Y %H:%M:%S", localtime(time))."   ".shift @_;
	lock(@log_data);

	shift @log_data if (scalar(@log_data) > $config{'log_size'});

	push @log_data, $line;

	return if ($log_scrolled);

	$log_subwin->addstr($line);
	$log_subwin->refresh;
}

sub refresh_log {
	lock(@log_data);
	foreach my $line (@log_data) {
		$log_subwin->addstr($line);
	}
	$log_subwin->refresh;
}

sub print_main_headers() {
	my $line;
	my $fmt;
	my $host_title;
	my $s;
	my $item;
	my $pos;

	$fmt = '%-'.$hdr_len->{'host'}.'s%'.$hdr_len->{'sep'}.'s%'.
		$hdr_len->{'rtt'}.'s%'.$hdr_len->{'sep'}.'s%-'.
		$hdr_len->{'history'}.'s';

	if ($config{'print_resolved_ip'}) {
		$host_title = 'Resolved IP';
	} else {
		$host_title = 'Hostname';
	}

	$line = sprintf($fmt,
		$host_title, '',
		$stats_selector[0], '',
		'Ping history'.($config{'show_scale'} ? ' with scale' : '')
	);

	attron(A_BOLD);
	addstr(2, 0, $line);
	attroff(A_BOLD);
	
	$s = "Ping-Multi keys: ".
		"DNS resolve | Stats | ".
		"Time scale (per ".$config{'scale_ms'}."ms) | Pause ".
		($config{'pause'} ? 'on ' : 'off')." | Quit";
	addstr(0, 0, $s);
	attron(A_BOLD);
	for $item (qw/ DNS Stats Time Pause Quit /) {
		$pos = index($s, $item);
		if ($pos == -1) {
			die("Unable to find token to make bold: $item");
		}
		addstr(0, $pos, substr($item, 0, 1));
	}
	attroff(A_BOLD);
}

sub usage() {
	die(
		"Usage: ".basename($0)." [-S] [-f FILE] [-W timeout] [HOST]...\n".
		"Ping all hosts from FILE and HOSTs.\n\n".
		"  -f, --file=FILE     read list of hosts from file\n".
		"  -h, --help          display this help and exit\n".
		"  -S, --sync-ping     send the same amount of ping requests for all hosts\n".
		"  -W, --wait=SECS     timeout in seconds to wait for a ping reply\n".
		"  -i, --interval=SECS time in seconds between sending each request\n"
	);
}

sub term_resize_handle {
	return unless ($term_resize);
	$term_resize = 0;

	reinit_curses();
	calc_hdr_lengths();
	refresh_log();
}

sub main() {
	my $file = '';
	my $help;

	GetOptions(
	    'file|f=s' => \$file,
	    'help|h' => \$help,
	    'sync-ping|S' => \$config{'sync_ping'},
	    'wait|W=f' => \$timeout,
	    'interval|i=f' => \$ping_interval,
	);

	if ($help) {
		usage();
	}

	if (scalar @ARGV == 0 && $file eq '') {
		usage();
	}

	$config{'scale_ms'} = floor($timeout * 1000 / 10); # 0..9

	if ($file ne '') {
		read_list_file_and_init_structs($file);
	}

	foreach my $ip (@ARGV) {
		init_structs_for_host($ip);
	}
	start_ping_threads();

	init_curses();
	calc_hdr_lengths();

	while(1) {
		getch_blocking(); # with a very short timeout
		handle_pressed_keys();

		term_resize_handle();

		print_main_headers();
		print_host_headers();
		print_ping_data();
		trigger_sync_ping();

		if (scalar threads->list(threads::running) != scalar keys %{$host_meta}) {
			die("A worker thread exited unexpectedly.");
		}

		refresh();

		sleep(0.3);
	}
}

sub exit_curses_and_join_threads {
	endwin();

	for (@thr_handles) {
		$_->detach(); # discard exit status
	}
}

$SIG{__WARN__} = sub { # make warn() fatal
	die($_[0]);
};

$SIG{__DIE__} = sub {
	exit_curses_and_join_threads();
};

$SIG{INT} = sub {
	exit_curses_and_join_threads();
	exit(0);
};

main();
